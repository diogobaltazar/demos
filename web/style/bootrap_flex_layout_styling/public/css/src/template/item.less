/**
*   Item class
*/
.my-item {
    // display : flex !important;
    // width   : @DEFAULT_DIV_WIDTH;
    // height  : @DEFAULT_DIV_HEIGHT;

    /*
        Order in which the item appears whithin the set of elements inside
        the parent container.
    */
    // order   : 1;

    /*
        flex-grow

        Ability for a flex item to grow if necessary. It accepts a unitless
        value that serves as a proportion. It dictates what amount of the
        available space inside the flex container the item should take up.

        If all items have flex-grow set to 1, the remaining space in the
        container will be distributed equally to all children. If one of
        the children has a value of 2, the remaining space would take up
        twice as much space as the others (or it will try to, at least).

        Negative numbers are invalid.

        flex-shrink

        This defines the ability for a flex item to shrink if necessary.

            - default: 1

        Negative numbers are invalid.

        flex-basis

        Default size of an element before the remaining space is
        distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword.
        The auto keyword means “look at my width or height property”.
        The content keyword means “size it based on the item’s content” –
        this keyword isn’t well supported yet, so it’s hard to test and
        harder to know what its brethren max-content, min-content, and
        fit-content do.

            - default: auto

        If set to 0, the extra space around content isn’t factored in.
        If set to auto, the extra space is distributed based on its flex-grow
        value.

        flex
        
        This is the shorthand for flex-grow, flex-shrink and flex-basis
        combined. The second and third parameters (flex-shrink and
        flex-basis) are optional.
        The default is 0 1 auto, but if you set it with a single number
        value, it’s like 1 0.


            - none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
        
        It is recommended that you use this shorthand property rather
        than set the individual properties. The shorthand sets the other
        values intelligently.
    */
    // flex: 0 1 auto;

    /*
        align-self

        This allows the default alignment (or the one specified by
        align-items) to be overridden for individual flex items.

        Please see the container.align-items explanation to understand the
        available values.

            - auto
            - flex-start
            - flex-end
            - center
            - baseline
            - stretch

        Note that float, clear and vertical-align have no effect on a flex
        item.
    */
    // align-self: auto;
}